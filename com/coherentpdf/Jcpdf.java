package com.coherentpdf;

public class Jcpdf {
    public Jcpdf()
    {
      System.loadLibrary("cpdf");
      System.loadLibrary("jcpdf");
    }
    public native void startup();
    public native String version();
    public native void setFast();
    public native void setSlow();
    public native int fromFile(String filename, String userpw);
    public native int fromFileLazy(String filename, String userpw);
    public native byte[] toMemory(int pdf, boolean linearize, boolean make_id);
    public native int fromMemory(byte[] data, String userpw);
    public native void fromMemoryLazyRelease(byte[] data);
    public native int fromMemoryLazy(byte[] data, String userpw);
    public native int startEnumeratePDFs();
    public native int enumeratePDFsKey(int n);
    public native String enumeratePDFsInfo(int n);
    public native void endEnumeratePDFs();
    public native double ptOfCm(double f);
    public native double ptOfMm(double f);
    public native double ptOfIn(double f);
    public native double cmOfPt(double f);
    public native double mmOfPt(double f);
    public native double inOfPt(double f);
    public native int range(int from, int to);
    public native int all(int pdf);
    public native int odd(int r);
    public native int even(int r);
    public native int rangeUnion(int r, int s);
    public native int difference(int r, int s);
    public native int removeDuplicates(int r);
    public native int rangeLength(int r);
    public native int rangeGet(int r, int n);
    public native int rangeAdd(int r, int n);
    public native boolean isInRange(int r, int n);
    public native int parsePagespec(int pdf, String pagespec);
    public native boolean validatePagespec(String pagespec);
    public native String stringOfPagespec(int pdf, int r);
    public native int blankRange();
    public native int pages(int pdf);
    public native int pagesFast(String userpw, String filename);
    public native void toFile(int pdf, String filename, boolean linearize, boolean make_id);
    public native void toFileExt(int pdf, String filename, boolean linearize, boolean make_id, boolean preserve_objstm, boolean create_objstm, boolean compress_objstm);
    public native boolean isEncrypted(int pdf);
    public native boolean isLinearized(String filename);
    public native int toFileEncrypted(int pdf, int encryption_method, int[] permissions, String owner_password, String user_password, boolean linearize, boolean makeid, String filename);
    public native int toFileEncryptedExt(int pdf, int encryption_method, int[] permissions, String owner_password, String user_password, boolean linearize, boolean makeid, boolean preserve_objstm, boolean generate_objstm, boolean compress_objstm, String filename);
    public native boolean hasPermission(int pdf, int permission);
    public native int encryptionKind(int pdf);
    public native void decryptPdf(int pdf, String userpw);
    public native void decryptPdfOwner(int pdf, String ownerpw);
    public native int mergeSimple(int[] pdfs);
    public native int merge(int[] pdfs, boolean retain_numbering, boolean remove_duplicate_fonts);
    public native int mergeSame(int[] pdfs, boolean retain_numbering, boolean remove_duplicate_fonts, int[] ranges);
    public native int selectPages(int pdf, int range);
    public native void scalePages(int pdf, int range, double sx, double sy);
    public native void scaleToFit(int pdf, int range, double w, double h, double scale);
    public native void scaleToFitPaper(int pdf, int range, int papersize, double scale);
    public native void scaleContents(int pdf, int range, int anchor, double p1, double p2, double scale);
    public native void shiftContents(int pdf, int range, double dx, double dy);
    public native void rotate(int pdf, int range, int angle);
    public native void rotateBy(int pdf, int range, int angle);
    public native void rotateContents(int pdf, int range, double angle);
    public native void upright(int pdf, int range);
    public native void hFlip(int pdf, int range);
    public native void vFlip(int pdf, int range);
    public native void crop(int pdf, int range, double x, double y, double w, double h);
    public native void removeCrop(int pdf, int range);
    public native void removeTrim(int pdf, int range);
    public native void removeArt(int pdf, int range);
    public native void removeBleed(int pdf, int range);
    public native void trimMarks(int pdf, int range);
    public native void showBoxes(int pdf, int range);
    public native void hardBox(int pdf, int range, String box);
    public native void compress(int pdf);
    public native void decompress(int pdf);
    public native void squeezeInMemory(int pdf);
    public native void startGetBookmarkInfo(int pdf);
    public native int numberBookmarks();
    public native int getBookmarkLevel(int serial);
    public native int getBookmarkPage(int pdf, int serial);
    public native String getBookmarkText(int serial);
    public native boolean getBookmarkOpenStatus(int serial);
    public native void endGetBookmarkInfo();
    public native void startSetBookmarkInfo(int n);
    public native void setBookmarkLevel(int serial, int level);
    public native void setBookmarkPage(int pdf, int serial, int pagenum);
    public native void setBookmarkOpenStatus(int serial, boolean open);
    public native void setBookmarkText(int serial, String text);
    public native void endSetBookmarkInfo(int pdf);
    public native byte[] getBookmarksJSON(int pdf);
    public native void setBookmarksJSON(int pdf, byte[] data);
    public native void tableOfContents(int pdf, int font, double fontsize, String title, boolean bookmark);
    public native void addText(boolean metrics, int pdf, int range, String text, int anchor, double p1, double p2, double linespacing, int bates, int font, double fonrtsize, double r, double g, double b, boolean underneath, boolean cropbox, boolean outline, double opacity, int justification, boolean midline, boolean topline, String filename, double linewidth, boolean embed_fonts);
    public native void addTextSimple(int pdf, int range, String text, int anchor, double p1, double p2, int font, double fontsize);
    public native void removeText(int pdf, int range);
    public native int textWidth(int font, String text);
    public native void stampOn(int pdf, int pdf2, int range);
    public native void stampUnder(int pdf, int pdf2, int range);
    public native void stampExtended(int pdf, int pdf2, int range, boolean isover, boolean scale_stamp_to_fit, int anchor, double p1, double p2, boolean relative_to_cropbox);
    public native int combinePages(int pdf, int pdf2);
    public native String stampAsXObject(int pdf, int range, int stamp_pdf);
    public native void addContent(String s, boolean before, int pdf, int range); 
    public native void impose(int pdf, double x, double y, boolean fit, boolean columns, boolean rtl, boolean btt, boolean center, double margin, double spacing, double linewidth);
    public native void twoUp(int pdf);
    public native void twoUpStack(int pdf);
    public native void padBefore(int pdf, int range);
    public native void padAfter(int pdf, int range);
    public native void padEvery(int pdf, int n);
    public native void padMultiple(int pdf, int n);
    public native void padMultipleBefore(int pdf, int n);
    public native byte[] annotationsJSON(int pdf);
    public native int getVersion(int pdf);
    public native int getMajorVersion(int pdf);
    public native String getTitle(int pdf);
    public native String getAuthor(int pdf);
    public native String getSubject(int pdf);
    public native String getKeywords(int pdf);
    public native String getCreator(int pdf);
    public native String getProducer(int pdf);
    public native String getCreationDate(int pdf);
    public native String getModificationDate(int pdf);
    public native String getTitleXMP(int pdf);
    public native String getAuthorXMP(int pdf);
    public native String getSubjectXMP(int pdf);
    public native String getKeywordsXMP(int pdf);
    public native String getCreatorXMP(int pdf);
    public native String getProducerXMP(int pdf);
    public native String getCreationDateXMP(int pdf);
    public native String getModificationDateXMP(int pdf);
    public native void setTitle(int pdf, String str);
    public native void setAuthor(int pdf, String str);
    public native void setSubject(int pdf, String str);
    public native void setKeywords(int pdf, String str);
    public native void setCreator(int pdf, String str);
    public native void setProducer(int pdf, String str);
    public native void setCreationDate(int pdf, String str);
    public native void setModificationDate(int pdf, String str);
    public native void setTitleXMP(int pdf, String str);
    public native void setAuthorXMP(int pdf, String str);
    public native void setSubjectXMP(int pdf, String str);
    public native void setKeywordsXMP(int pdf, String str);
    public native void setCreatorXMP(int pdf, String str);
    public native void setProducerXMP(int pdf, String str);
    public native void setCreationDateXMP(int pdf, String str);
    public native void setModificationDateXMP(int pdf, String str);
    public native void getDateComponents(String datestring, int[] r);
    public native String dateStringOfComponents(int year, int month, int day, int hour, int minute, int second, int hour_offset, int minute_offset);
    public native void getMediaBox(int pdf, int pagenumber, double[] r);
    public native void getCropBox(int pdf, int pagenumber, double[] r);
    public native void getBleedBox(int pdf, int pagenumber, double[] r);
    public native void getArtBox(int pdf, int pagenumber, double[] r);
    public native void getTrimBox(int pdf, int pagenumber, double[] r);
    public native int getPageRotation(int pdf, int pagenumber);
    public native boolean hasBox(int pdf, int pagenumber, String boxname);
    public native void setMediabox(int pdf, int range, double minx, double maxx, double miny, double maxy);
    public native void setCropBox(int pdf, int range, double minx, double maxx, double miny, double maxy);
    public native void setTrimBox(int pdf, int range, double minx, double maxx, double miny, double maxy);
    public native void setArtBox(int pdf, int range, double minx, double maxx, double miny, double maxy);
    public native void setBleedBox(int pdf, int range, double minx, double maxx, double miny, double maxy);
    public native void markTrapped(int pdf);
    public native void markUntrapped(int pdf);
    public native void markTrappedXMP(int pdf);
    public native void markUntrappedXMP(int pdf);
    public native void setPageLayout(int pdf, int layout);
    public native void setPageMode(int pdf, int mode);
    public native void hideToolbar(int pdf, boolean flag);
    public native void hideMenubar(int pdf, boolean flag);
    public native void hideWindowUi(int pdf, boolean flag);
    public native void fitWindow(int pdf, boolean flag);
    public native void centerWindow(int pdf, boolean flag);
    public native void displayDocTitle(int pdf, boolean flag);
    public native void openAtPage(int pdf, boolean fit, int pagenumber);
    public native void setMetadataFromFile(int pdf, String filename);
    public native void setMetadataFromByteArray(int pdf, byte[] data);
    public native byte[] getMetadata(int pdf);
    public native void removeMetadata(int pdf);
    public native void createMetadata(int pdf);
    public native void setMetadataDate(int pdf, String date);
    public native void addPageLabels(int pdf, int style, String prefix, int offset, int range, boolean progress);
    public native void removePageLabels(int pdf);
    public native int startGetPageLabels(int pdf);
    public native void endGetPageLabels();
    public native int getPageLabelOffset(int n);
    public native int getPageLabelStyle(int n);
    public native int getPageLabelRange(int n);
    public native String getPageLabelPrefix(int n);
    public native String getPageLabelStringForPage(int pdf, int n);
    public native void attachFile(String filename, int pdf);
    public native void attachFileToPage(String filename, int pdf, int pagenumber);
    public native void attachFileFromMemory(byte[] data, String filename, int pdf);
    public native void attachFileToPageFromMemory(byte[] data, String filename, int pdf, int pagenumber);
    public native void removeAttachedFiles(int pdf);
    public native void startGetAttachments(int pdf);
    public native int numberGetAttachments();
    public native String getAttachmentName(int serial);
    public native int getAttachmentPage(int serial);
    public native byte[] getAttachmentData(int serial);
    public native void endGetAttachments(); 
    public native int startGetImageResolution(int pdf, double res);
    public native int getImageResolutionPageNumber(int serial);
    public native String getImageResolutionImageName(int serial);
    public native int getImageResolutionXPixels(int serial);
    public native int getImageResolutionYPixels(int serial);
    public native double getImageResolutionXRes(int serial);
    public native double getImageResolutionYRes(int serial);
    public native void endGetImageResolution();
    public native void startGetFontInfo(int pdf);
    public native int numberFonts();
    public native String getFontName(int serial);
    public native int getFontPage(int serial);
    public native String getFontType(int setial);
    public native String getFontEncoding(int serial);
    public native void endGetFontInfo();
    public native void removeFonts(int pdf);
    public native void copyFont(int from_pdf, int to_pdf, int range, int pagenumber, String fontname);
    public native void outputJSON(String filename, boolean parse_content, boolean no_stream_data, boolean decompress_streams, int pdf);
    public native int fromJSON(String filename);
    public native byte[] outputJSONMemory(int pdf, boolean parse_content, boolean no_stream_data, boolean decompress_streams);
    public native int fromJSONMemory(byte[] data);
    public native int startGetOCGList(int pdf);
    public native String OCGListEntry(int serial);
    public native void endGetOCGList();
    public native void OCGCoalesce(int pdf);
    public native void OCGRename(int pdf, String f, String t);
    public native void OCGOrderAll(int pdf);
    public native int blankDocument(double w, double h, int pages);
    public native int blankDocumentPaper(int papersize, int pages);
    public native int textToPDF(double w, double h, int font, double fontsize, String filename);
    public native int textToPDFPaper(int papersize, int font, double fontsize, String filename);
    public native void draft(int pdf, int range, boolean boxes);
    public native void removeAllText(int pdf, int range);
    public native void blackText(int pdf, int range);
    public native void blackLines(int pdf, int range);
    public native void blackFills(int pdf, int range);
    public native void thinLines(int pdf, int range, double minwidth);
    public native void copyId(int pdf, int pdf2);
    public native void removeId(int pdf);
    public native void setVersion(int pdf, int version);
    public native void setFullVersion(int pdf, int major, int minor);
    public native void removeDictEntry(int pdf, String str);
    public native void removeDictEntrySearch(int pdf, String str, String searchterm);
    public native void replaceDictEntry(int pdf, String key, String newvalue);
    public native void replaceDictEntrySearch(int pdf, String key, String newvalue, String searchterm);
    public native byte[] getDictEntries(int pdf, String key);
    public native void removeClipping(int pdf, int range);

    public int noEdit = 0;
    public int noPrint = 1;
    public int noCopy = 2;
    public int noAnnot = 3;
    public int noForms = 4;
    public int noExtract = 5;
    public int noAssemble = 6;
    public int noHqPrint = 7;

    public int pdf40bit = 0;
    public int pdf128bit = 1;
    public int aes128bitfalse = 2;
    public int aes128bittrue = 3;
    public int aes256bitfalse = 4;
    public int aes256bittrue = 5;
    public int aes256bitisofalse = 6;
    public int aes256bitiso = 7;

    public int decimalArabic = 0;
    public int uppercaseRoman = 1;
    public int lowercaseRoman = 2;
    public int uppercaseLetters = 3;
    public int lowercaseLetters = 4;

    public int singlePage = 0;
    public int oneColumn = 1;
    public int twoColumnLeft = 2;
    public int twoColumnRight = 3;
    public int twoPageLeft = 4;
    public int twoPageRight = 5;

    public int useNone = 0;
    public int useOutlines = 1;
    public int useThumbs = 2;
    public int useOC = 3;
    public int useAttachments = 4;

    public int a0portrait = 0;
    public int a1portrait = 1;
    public int a2portrait = 2;
    public int a3portrait = 3;
    public int a4portrait = 4;
    public int a5portrait = 5;
    public int a0landscape = 6;
    public int a1landscape = 7;
    public int a2landscape = 8;
    public int a3landscape = 9;
    public int a4landscape = 10;
    public int a5landscape = 11;
    public int usletterportrait = 12;
    public int usletterlandscape = 13;
    public int uslegalportrait = 14;
    public int uslegallandscape = 15;

    public int timesRoman = 0;
    public int timesBold = 1;
    public int timesItalic = 2;
    public int timesBoldItalic = 3;
    public int helvetica = 4;
    public int helveticaBold = 5;
    public int helveticaOblique = 6;
    public int helveticaBoldOblique = 7;
    public int courier = 8;
    public int courierBold = 9;
    public int courierOblique = 10;
    public int courierBoldOblique = 11;

    public int posCentre = 0;
    public int posLeft = 1;
    public int posRight = 2;
    public int top = 3;
    public int topLeft = 4;
    public int topRight = 5;
    public int left = 6;
    public int bottomLeft = 7;
    public int bottom = 8;
    public int bottomRight = 9;
    public int right = 10;
    public int diagonal = 11;
    public int reverseDiagonal = 12;

    public int leftJustify = 0;
    public int centreJustify = 1;
    public int rightJusitfy = 2;
}
